---
title: "Lab04"
author: "Yuxin Mei"
date: "2/20/2019"
output: html_document
---

```{r}
library(dplyr)
library(ggplot2)
```


-----

## NBA Players Data

```{r dat}
dat <- read.csv("/Users/yuxinmei/Desktop/nba2018-players.csv", stringsAsFactors = FALSE)
```

## Filtering, slicing, and selecting


- use `slice()` to subset the data by selecting the first 5 rows.

```{r}
slice(dat, 1:5)
```

- use `slice()` to subset the data by selecting rows 10, 15, 20, ..., 50.

```{r}
slice(dat, seq(10, 50, by = 5))
```

- use `slice()` to subset the data by selecting the last 5 rows.

```{r}
slice(dat, (nrow(dat) - 4):nrow(dat))
```

- use `filter()` to subset those players with height less than 70 inches tall.

```{r}
filter(dat, height < 70)
```

- use `filter()` to subset rows of Golden State Warriors (`'GSW'`).

```{r}
filter(dat, team == "GSW")
```

- use `filter()` to subset rows of GSW centers (`'C'`).

```{r}
filter(dat, position == "C")
```

- use `filter()` and then `select()`, to subset rows of lakers (`'LAL'`), and 
then display their names.

```{r}
select(filter(dat, team == "LAL"), player)
```

- use `filter()` and then `select()`, to display the name and salary, 
of GSW point guards

```{r}
select(filter(dat, team == "GSW" & position == "PG"), player, salary)
```

- find how to select the name, age, and team, of players with more than 
10 years of experience, making 10 million dollars or less.

```{r}
select(filter(dat, experience > 10 & salary <= 10000000), player, age, team)
```

- find how to select the name, team, height, and weight, of rookie players, 
20 years old, displaying only the first five occurrences (i.e. rows)

```{r}
select(slice(filter(dat, age == 20 & experience <= 1), 1:5), player, team, height, weight)
```


-----


## Adding new variables: `mutate()` and Reordering rows: `arrange()`


```{r}
# creating a small data frame step by step
gsw <- filter(dat, team == 'GSW')
gsw <- select(gsw, player, height, weight)
gsw <- slice(gsw, c(4, 8, 10, 14, 15))
gsw
```


- using the data frame `gsw`, add a new variable `product` with the product of 
`height` and `weight`.

```{r}
mutate(gsw, product = height * weight)
```

- create a new data frame `gsw3`, by adding columns `log_height` and `log_weight`
with the log transformations of `height` and `weight`.

```{r}
gsw3 <- mutate(gsw, log_height = log(height), log_weight = log(weight))
gsw3
```

- use the original data frame to `filter()` and `arrange()` those players with height less than 71 inches tall, in increasing order.

```{r}
arrange(
  filter(dat, height < 71), 
  height)
```

- display the name, team, and salary, of the top-5 highest paid players

```{r}
select(
  slice(
    arrange(dat, desc(salary)), 
    1:5), 
  player, team, salary)
```

- display the name, team, and points3, of the top 10 three-point players

```{r}
select(
  slice(
    arrange(dat, desc(points3)),
    1:10),
  player, team, points3)
```

- create a data frame `gsw_mpg` of GSW players, that contains variables for 
player name, experience, and `min_per_game` (minutes per game), sorted by `min_per_game` (in descending order)

```{r}
gsw_mpg <- arrange(
  select(
    mutate(
      filter(dat, team == "GSW"),
      min_per_game = minutes / games),
    player, experience, min_per_game), 
  desc(min_per_game)
  )

gsw_mpg
```


-----


## Summarizing values with `summarise()`


### Practice:

- use `summarise()` to get the largest height value.

```{r}
summarise(dat, max(height))
```

- use `summarise()` to get the standard deviation of `points3`.

```{r}
summarise(dat, sd(points3))
```

- use `summarise()` and `group_by()` to display the median of three-points,
by team.

```{r}
summarise(
  group_by(dat, team),
  median(points3)
)
```

- display the average triple points by team, in ascending order, of the 
bottom-5 teams (worst 3pointer teams)

```{r}
slice(
  arrange(
    summarise(
      group_by(dat, team),
      average_3_points = mean(points3)),
    average_3_points), 
  1:5)
```

- obtain the mean and standard deviation of `age`, for Power Forwards, with 5 
and 10 years of experience (including 5 and 10).

```{r}
summarise(
  filter(
    dat, position == "PF" & experience >= 5 & experience <= 10),
  mean_age = mean(age),
  sd_age = sd(age)
)
```


-----


# First contact with `ggplot()`


### Practice:

- Open the [ggplot2 cheatsheet](https://github.com/ucb-stat133/stat133-cheatsheets/blob/master/ggplot2-cheatsheet-2.1.pdf)  

- Use the data frame `gsw` to make a scatterplot of `height` and `weight`.

```{r Height and Weight, eval = FALSE}
ggplot(gsw, aes(x = height, y = weight)) +
  geom_point()
```

- Find out how to make another scatterplot of `height` and `weight`, 
 using `geom_text()` to display the names of the players.
 
```{r Height and Weight with Text}
ggplot(gsw, aes(x = height, y = weight)) +
  geom_point() +
  geom_text(aes(label = player), nudge_x = 0.3, nudge_y = 3)
```
 
- Get a scatter plot of `height` and `weight`, for ALL the warriors, displaying
their names with `geom_label()`.

```{r Height and Weight (Warriors)}
ggplot(filter(dat, team == "GSW"), aes(x = height, y = weight)) +
  geom_point() +
  geom_label(aes(label = player), nudge_y = 5, alpha = 0.4)
```

- Get a density plot of `salary` (for all NBA players).

```{r Density of Salaries}
ggplot(dat, aes(x = salary)) +
  geom_density()
```

- Get a histogram of `points2` with binwidth of 50 (for all NBA players).

```{r Points2}
ggplot(dat, aes(x = points2)) +
  geom_histogram(binwidth = 50, color = "black", fill = "pink") +
  geom_text(aes(label = ..count..), stat = "bin", binwidth = 50, nudge_y = 3)
```

- Get a barchart of the `position` frequencies (for all NBA players).

```{r Position Frequencies}
ggplot(dat, aes(x = position)) +
  geom_bar(fill = "sky blue") +
  geom_text(aes(label = ..count..), stat = "count", nudge_y = 3)
```

- Make a scatterplot of `experience` and `salary` of all Centers, and use 
`geom_smooth()` to add a regression line.

```{r Experience and Salary with Regression Line}
ggplot(filter(dat, position == "C"), aes(x = experience, y = salary)) + 
  geom_point() +
  geom_smooth(method = lm)
```

- Repeat the same scatterplot of `experience` and `salary` of all Centers, but 
now use `geom_smooth()` to add a loess line (i.e. smooth line).

```{r Experience and Salary with Loess Line}
ggplot(filter(dat, position == "C"), aes(x = experience, y = salary)) + 
  geom_point() +
  geom_smooth()
```


-----

## Faceting


### Practice:

- Make scatterplots of `experience` and `salary` faceting by `position`

```{r}
ggplot(dat, aes(x = experience, y = salary)) +
  geom_point(alpha = 0.7) +
  facet_grid(. ~ position)
```

- Make scatterplots of `experience` and `salary` faceting by `team`

```{r}
ggplot(dat, aes(x = experience, y = salary)) +
  geom_point(alpha = 0.7) +
  facet_wrap( ~ team)
```

- Make density plots of `age` faceting by `team`

```{r}
ggplot(dat, aes(x = age)) +
  geom_density() +
  facet_wrap( ~ team)
```

- Make scatterplots of `height` and `weight` faceting by `position`

```{r}
ggplot(dat, aes(x = height, y = weight)) +
  geom_point(alpha = 0.7) +
  facet_wrap( ~ position)
```

- Make scatterplots of `height` and `weight`, with a 2-dimensional density, 
`geom_density2d()`, faceting by `position`

```{r}
ggplot(dat, aes(x = height, y =weight)) +
  geom_point(alpha = 0.7) +
  geom_density2d() +
  facet_wrap( ~ position)
```

- Make a scatterplot of `experience` and `salary` for the Warriors, but this time add a layer with `theme_bw()` to get a simpler background

```{r Experience and Salary For Warriors}
ggplot(filter(dat, team == "GSW"), aes(x = experience, y = salary)) +
  geom_point(alpha = 0.7) +
  theme_bw()
```

- Repeat any of the previous plots but now adding a leyer with another 
theme e.g. `theme_minimal()`, `theme_dark()`, `theme_classic()`

```{r Height and Weight with Text (Another Theme)}
ggplot(gsw, aes(x = height, y = weight)) +
  geom_point() +
  geom_text(aes(label = player), nudge_x = 0.3, nudge_y = 3) +
  theme_minimal()
```


