---
title: "Lab05"
author: "Yuxin Mei"
date: "2/27/2019"
output: html_document
---


### 1) Lab Directory


- Open (or launch) the command line

- Use the command `pwd` to see what's your current directory

```{r eval=FALSE}
pwd
```

- Use `mkdir` to create a new directory `stat133-lab05`

```{r eval=FALSE}
mkdir stat133-lab05
```

- Change directory to `stat133-lab05`

```{r eval=FALSE}
cd stat133-lab05
```

- Use the command `curl` to download the following text file:

```{r eval=FALSE}
# the option is the letter O (Not the number 0)
curl -O http://textfiles.com/food/bread.txt
```

- Use the command `ls` to list the contents in your current directory

```{r eval=FALSE}
ls
```

- Use the command `curl` to download these other text files:

```{r eval=FALSE}
curl -O http://textfiles.com/food/btaco.txt
curl -O http://textfiles.com/food/1st_aid.txt
curl -O http://textfiles.com/food/beesherb.txt
curl -O http://textfiles.com/food/bakebred.txt
```


- Use the command `curl` to download the following csv files:

```{r eval=FALSE}
curl -O http://archive.ics.uci.edu/ml/machine-learning-databases/forest-fires/forestfires.csv
curl -O http://web.pdx.edu/~gerbing/data/cars.csv
curl -O http://web.pdx.edu/~gerbing/data/color.csv
curl -O http://web.pdx.edu/~gerbing/data/snow.csv
curl -O http://web.pdx.edu/~gerbing/data/mid1.csv
curl -O http://web.pdx.edu/~gerbing/data/mid2.csv
curl -O http://web.pdx.edu/~gerbing/data/minutes1.csv
curl -O http://web.pdx.edu/~gerbing/data/minutes2.csv
```
	

### 2) Inspecting a Directory


- Use the command `ls` to list the contents in your current directory

```{r eval=FALSE}
ls
```

- Now try `ls -l` to list the contents in your current directory in long format

```{r eval=FALSE}
ls -l
```

- Look at the `man` documentation of `ls` to find out how to list the contents in reverse order

```{r eval=FALSE}
ls -r
```

- How would you list the contents in long format arranged by time?

```{r eval=FALSE}
ls -t -l
# ls -c -lt
# It's found that there's no difference in output between the previous command and "ls -c -l -lt"
```

- Find out how to use the wildcard `*` to list all the files with extension `.txt`

```{r eval=FALSE}
ls *.txt
```

- Use the wildcard `*` to list all the files with extension `.csv` in reverse order

```{r eval=FALSE}
ls -r *.csv 
```

- You can use the character `?` to represent a single character: e.g. `ls mid?.csv`. Find out how to use the wilcard `?` to list `.csv` files with names made of 4 characters (e.g. `mid1.csv`, `snow.csv`)

- The command `ls *[1]*.csv` should list `.csv` files with names containing the number 1 (e.g. `mid1.csv`, `minutes1.csv`). Adapt the command to list `.csv` files with names containing the number 2.

```{r eval=FALSE}
ls *[2]*.csv
```

- Find out how to list files with names containing any number.

```{r eval=FALSE}
ls *[0-9]*
```



### 3) Moving Files

- Inside `stat133-lab05` create a directory `data`

```{r eval=FALSE}
mkdir data
```

- Change directory to `data`

```{r eval=FALSE}
cd data
```

- Create a directory `txt-files`

```{r eval=FALSE}
mkdir txt-files
```

- Create a directory `csv-files`

```{r eval=FALSE}
mkdir csv-files
```

- Use the command `mv` to move the `bread.txt` file to the folder `txt-files`. Without changing directories, use `ls` to confirm that
`bread.txt` is now inside `txt-files`.

```{r eval=FALSE}
mv ../bread.txt txt-files
ls txt-files
```

- Use the wildcard `*` to move all the `.txt` files to the directory `txt-files`. Without changing directories, use `ls` to confirm that
all the `.txt` files are inside `txt-files`.

```{r eval=FALSE}
mv ../*.txt txt-files
ls ../*.txt 
# ls ../
ls txt-files
```

- Use the wildcard `*` to move all the `.csv` files to the directory `csv-files`. Without changing directories, use `ls` to confirm that
all the `.csv` files are inside `csv-files`.

```{r eval=FALSE}
mv ../*.csv csv-files
ls ../*.csv
# ls../
ls csv-files
```

- Try using the command `tree` to see a visual display of the filestructure. _Warning: You may not have this command in git-bash or in another shell flavor_.

```{r eval=FALSE}
tree ../
```



### 4) Copying Files

- Go back to the parent directory `stat133-lab05`

```{r eval=FALSE}
cd ../
```

- Create a directory `copies`

```{r eval=FALSE}
mkdir copies
```

- Use the command `cp` to copy the `bread.txt` file (the one inside the folder `txt-files`) to the `copies` directory

```{r eval=FALSE}
cp data/txt-files/bread.txt copies
```

- Without changing directories, use `ls` to confirm that
`bread.txt` is now inside `copies`.

```{r eval=FALSE}
ls copies
```

- Use the wildcard `*` to copy all the `.txt` files in the directory `copies`

```{r eval=FALSE}
cp data/txt-files/*.txt copies
```

- Without changing directories, use `ls` to confirm that all the `.txt` files is now inside `copies`.

```{r eval=FALSE}
ls copies
```

- Use the wildcard `*` to copy all the `.csv` files in the directory `copies`

```{r eval=FALSE}
cp data/csv-files/*.csv copies
```

- Try using the command `tree` to see a visual display of the filestructure.

```{r eval=FALSE}
tree .
```


### 5) Renaming and Deleting Files

- Change to the directory `copies`

```{r eval=FALSE}
cd copies
```

- Use the command `mv` to rename the file `bread.txt` as `bread-recipe.txt`

```{r eval=FALSE}
mv bread.txt bread-recipe.txt
```

- Rename the file `cars.csv` as `autos.csv`

```{r eval=FALSE}
mv cars.csv autos.csv
```

- Rename the file `btaco.txt` as `breakfast-taco.txt`

```{r eval=FALSE}
mv btaco.txt breakfast-taco.txt
```

- Change to the parent directory (i.e. `stat133-lab05`)

```{r eval=FALSE}
cd ../
```

- Rename the directory `copies` as `copy-files`

```{r eval=FALSE}
mv copies copy-files
```

- Find out how to use the `rm` command to delete the `.csv` files that are in `copy-files`

```{r eval=FALSE}
rm copy-files/*.csv
```

- Find out how to use the `rm` command to delete the directory `copy-files`

```{r eval=FALSE}
rm -r copy-files
```

- List the contents of the directory `txt-files` displaying the results in reverse (alphabetical) order

```{r eval=FALSE}
ls -r data/txt-files
```


-----

### Optional challenge

- `getwd()`
- `setwd()`
- `download.file()`
- `dir.create()`
- `list.files()`
- `list.dirs()`
- `file.create()`
- `file.copy()`
- `file.rename()`
- `file.remove()`

```{r eval=FALSE}
?files
```


-----

## Abalone Data Set


- Change to the directory `stat133-lab05`

```{r eval=FALSE}
cd stat133-lab05
```

- Create a directory `abalone`

```{r eval=FALSE}
mkdir abalone
```

- Change to `abalone` directory

```{r eval=FALSE}
cd abalone
```

- Use `curl` to download the file `abalone.data` 

```{r eval=FALSE}
curl -O http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data
```

- Use the `file` command to know what type of file is `abalone.data`.

```{r eval=FALSE}
file abalone.data
```

    It's an ASCII text.  

- Use the _word count_ command `wc` to obtain information about: 1) newline count, 2) word count, and 3) byte count, of the `abalone.data` file.

```{r eval=FALSE}
wc abalone.data
```

    The corresponding information: 4177, 4177, 191873  

- See the `man` documentation of `wc` and learn what option you should use to obtain only the number of lines in `abalone.data`.

```{r eval=FALSE}
wc -l abalone.data
```

- Use `head` to take a peek at the first lines (10 lines by default) of `abalone.data`

```{r eval=FALSE}
head abalone.data
```

    M,0.455,0.365,0.095,0.514,0.2245,0.101,0.15,15
    M,0.35,0.265,0.09,0.2255,0.0995,0.0485,0.07,7
    F,0.53,0.42,0.135,0.677,0.2565,0.1415,0.21,9
    M,0.44,0.365,0.125,0.516,0.2155,0.114,0.155,10
    I,0.33,0.255,0.08,0.205,0.0895,0.0395,0.055,7
    I,0.425,0.3,0.095,0.3515,0.141,0.0775,0.12,8
    F,0.53,0.415,0.15,0.7775,0.237,0.1415,0.33,20
    F,0.545,0.425,0.125,0.768,0.294,0.1495,0.26,16
    M,0.475,0.37,0.125,0.5095,0.2165,0.1125,0.165,9
    F,0.55,0.44,0.15,0.8945,0.3145,0.151,0.32,19

- See the `man` documentation of `head` and learn what option you should use to display only the first 5 files in `abalone.data`.

```{r eval=FALSE}
man head
head -n 5 abalone.data
```

- How would you display the first 15 files in `abalone.data`?

```{r eval=FALSE}
head -n 15 abalone.data
```

- Use `tail` to take a peek at the last lines (10 lines by default) of `abalone.data`

```{r eval=FALSE}
tail abalone.data
```

    M,0.5,0.38,0.125,0.577,0.269,0.1265,0.1535,9
    F,0.515,0.4,0.125,0.615,0.2865,0.123,0.1765,8
    M,0.52,0.385,0.165,0.791,0.375,0.18,0.1815,10
    M,0.55,0.43,0.13,0.8395,0.3155,0.1955,0.2405,10
    M,0.56,0.43,0.155,0.8675,0.4,0.172,0.229,8
    F,0.565,0.45,0.165,0.887,0.37,0.239,0.249,11
    M,0.59,0.44,0.135,0.966,0.439,0.2145,0.2605,10
    M,0.6,0.475,0.205,1.176,0.5255,0.2875,0.308,9
    F,0.625,0.485,0.15,1.0945,0.531,0.261,0.296,10
    M,0.71,0.555,0.195,1.9485,0.9455,0.3765,0.495,12  

- See the `man` documentation of `tail` and learn what option you should use to display only the last 3 files in `abalone.data`.

```{r eval=FALSE}
man tail
tail -n 3 abalone.data
```

- Use the `less` command to look at the contents of `abalone.data` (this command opens a _paginator_ so you can move up and down the contents of the file). Press the key `q` to exit the paginator.

```{r eval=FALSE}
less abalone.data
```

- Rename `abalone.data` as `abalone.csv`

```{r eval=FALSE}
mv abalone.data abalone.csv
```

- Make a copy of `abalone.csv`, naming this copy `dataset.csv`

```{r eval=FALSE}
cp abalone.csv dataset.csv
```

- Move `dataset.csv` to the directory `csv-files`

```{r eval=FALSE}
mv dataset.csv ../data/csv-files
```


-----


## Exporting Objects from R to External Files


- Create a directory `exports` inside `stat133-lab05`.

```{r eval=FALSE}
mkdir ../exports
```

- The data that you will have to use is the built-in data frame `mtcars` 

```{r}
head(mtcars)
```


### Exporting Tables from R's console


```{r}
getwd()
```


#### Use A Relative Path to Write Document


```{r eval=FALSE}
write.csv(
  x = mtcars,
  file = '../stat133-lab05/exports/mtcars.csv'
)
```


### Exporting some R output


```{r}
summary(mtcars[ ,c('mpg', 'disp')])
```

```{r eval=FALSE}
# divert output to the specified file
sink(file = '../stat133-lab05/summary-mpg-disp.txt')
summary(mtcars[ ,c('mpg', 'disp')])
# closing sinking operation
sink()
```


### Exporting some "base" graphs


Base R provides a wide array of functions to save images in most common formats:

- `png()`
- `jpeg()`
- `tiff()`
- `bmp()`
- `svg()`
- `pdf()`

Similar to the writing table functions such as `write.table()` or `write.csv()`, 
and the `sink()` function, the graphics device functions require a file name
to be provided.  


```{r eval=FALSE}
# saving a scatterplot in png format
png(filename = "stat133-lab05/exports/scatterplot-mpg-disp.png")
plot(mtcars$mpg, mtcars$disp, pch = 20, 
     xlab = 'Miles per Gallon', ylab = 'Displacement')
dev.off()
```


-----


### Practice


- Export a data frame with columns `mpg`, `disp`, and `hp`, to a CSV file `dataset.csv` in the `exports/` subdirectory.

```{r eval=FALSE}
library(dplyr)

write.csv(
  x = select(mtcars, c("mpg", "disp", "hp")),
  file = "stat133-lab05/exports/dataset.csv"
)

# sink(file = 'stat133-lab05/exports/dataset.csv')
# print(mtcars[ ,c('mpg', 'disp')])
# sink()
```


- Export the output of `str()` on `mtcars` to a text file called `mtcars-structure.txt` (inside the `exports/` subdirectory). 

```{r eval=FALSE}
sink(file = "stat133-lab05/exports/mtcars-structure.txt")
str(mtcars)
sink()
```

- Export the `summary()` of the entire data frame `mtcars` to a text file `summary-mtcars.txt`, in the `exports/` folder.

```{r eval=FALSE}
sink(file = "stat133-lab05/exports/summary-mtcars.txt")
summary(mtcars)
sink()
```

- Open the help documentation of `png()` and related graphic devices.

```{r eval=FALSE}
?png
```

- Use `png()` to save a scatterplot of `mpg` and `wt` with `plot()`.
Save the graph as `scatterplot-mpg-wt.png` in the `exports/` folder.

```{r eval=FALSE}
png(filename = "stat133-lab05/exports/scatterplot-mpg-wt.png")
plot(x = mtcars$mpg, y = mtcars$wt)
dev.off()
```

- Save another version of the scatterplot between `hp` and `wt`, but now try to get an image with higher resolution. Save the plot as `scatterplot-hp-wt.png` in `exports/`.

```{r eval=FALSE}
png(filename = "stat133-lab05/exports/scatterplot-hp-wt.png", res = 200)
plot(x = mtcars$hp, y = mtcars$wt)
dev.off()
```

- Save a histogram in JPEG format of `mpg` with dimensions (width x height) 600 x 400 pixels, name the file `histogram-mpg.jpeg`.

```{r eval=FALSE}
jpeg(filename = "stat133-lab05/histogram-mpg.jpeg", width = 600, height = 300)
hist(x = mtcars$mpg)
dev.off()
```

- Use `pdf()` to save the previous histogram of `age` in PDF format,
with dimensions (width x height) 7 x 5 inches, name the file `histogram-mpg.pdf`.

```{r eval=FALSE}
pdf(file = "stat133-lab05/histogram-mpg.pdf", width = 7, height = 5)
hist(x = mtcars$mpg, main = "age")
dev.off()
```

- The package `"ggplot2"` comes with a wrapper function `ggsave()` that allows
you to save ggplot graphics to a specified file. By default, `ggsave()` saves
images in PDF format.

- Use `ggplot()` to make a scatterplot of `mpg` and `disp`,
and store it in a ggplot object named `gg_mpg_disp`.
Then use `ggsave()` to save the plot with dimensions (width x height) 
7 x 5 inches, as `scatterplot-mpg-disp.pdf`.

```{r eval=FALSE}
library(ggplot2)

gg_mpg_disp <- ggplot(mtcars, aes(x = mpg, y = disp)) + geom_point()

ggsave(filename = "stat133-lab05/exports/scatterplot-mpg-disp.pdf", width = 7, height = 5, units = "in")
```

